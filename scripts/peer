#!/usr/bin/env python3
"""

	Peer - Puristic, easy, enjoyable reference-manager

"""

import argparse
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest="command", help="")
parser_use = subparsers.add_parser("use", help="")
parser_use.add_argument("path", metavar="PATH", type=str, help="")
parser_add = subparsers.add_parser("add", help="")
parser_add.add_argument("list", metavar="LIST", nargs='+', type=str, help="")
args = parser.parse_args()
if args.command is None:
	parser.print_help()
#

import sys
import os
import requests
import json
import zlib
import shutil
import re
import string

def read_compressed_json(filename):
	with open(filename, "rb") as f:
		obj = json.loads(zlib.decompress(f.read()).decode())
	#
	return obj
#

def write_compressed_json(filename, obj):
	with open(filename, "wb") as f:
		f.write(zlib.compress(json.dumps(obj).encode()))
	#
	return
#


def doi2bib(doi):
	website = requests.get(
		"http://dx.doi.org/" + doi,
		headers={"accept": "application/x-bibtex"}
	)
	if not website.ok:
		return ""
	#
	return website.text
#

CONFIG_FILE = os.path.expanduser("~/.peerconfig")
def get_config():
	if not os.path.isfile(CONFIG_FILE):
		config = {}
	#
	else:
		with open(CONFIG_FILE, "r") as f:
			config = json.load(f)
		#
	#
	return config
#

def write_config(config):
	with open(CONFIG_FILE, "w") as f:
		json.dump(config, f, sort_keys=True, indent='\t')
	#
	return
#


config = get_config()
if args.command == "use": 
	path = args.path
	if not os.path.exists(path):
		os.makedirs(path)
	#
	faulty = False
	if len(os.listdir(path)) == 2:
		if not (
		os.path.isfile(os.path.join(path, "bibs"))
		and os.path.isdir(os.path.join(path, "references"))
		):
			faulty = True
		#
	#
	elif len(os.listdir(path)) == 0:
		os.mkdir(os.path.join(path, "references"))
		write_compressed_json(os.path.join(path, "bibs"), {})
	#
	else:
		faulty = True
	#

	if faulty:
		raise Exception("Given directory does not contain a valid repository.")
	#
	else:
		config["active"] = path
		write_config(config)
	#
#
elif args.command == "add":
	path = config.get("active", None)
	if path is None:
		raise Exception("No active repository.")
	#
	bibs_file = os.path.join(path, "bibs")
	repository = read_compressed_json(bibs_file)
	files_dois = args.list
	l = len(files_dois)
	if l < 2 or l % 2 != 0:
		raise Exception("More than two arguments expected.")
	#
	re_author = re.compile("\s+author[\s={\"]+([a-zA-Z\-\s\.,]+?)\s+and\s+.*")
	re_year = re.compile("\s*year[\s={\"]+([0-9]+).*")
	re_key = re.compile("\s*@[a-zA-Z]+{(.*?),.*")
	letters = [""] + list(string.ascii_lowercase)
	for i in range(0, l, 2):
		filepath, doi = files_dois[i:i+2]
		if doi in repository:
			print("Reference already loaded.")
			continue
		#
		if not os.path.exists(filepath):
			print("File not found \"{}\".".format(filepath))
			print("FILE: " + filepath, file=sys.stderr)
			continue
		#
		bib = doi2bib(doi)
		if len(bib) == 0:
			print("Could not load bib from doi \"{}\".".format(doi))
			print("DOI: " + doi, file=sys.stderr)
			continue
		#
		author = None
		year = None
		old_citation_key = None
		for line in bib.split("\n"):
			if author is None:
				a = re_author.match(line)
				if a is not None:
					author = a.groups()[0]
					if ',' in author:
						author = author.split()[0].replace(',', "")
					#
					else:
						author = author.split()[-1]
					#
					continue
				#
			#
			if year is None:
				y = re_year.match(line)
				if y is not None:
					year = y.groups()[0]
				#
				continue
			#
			if old_citation_key is None:
				k = re_key.match(bib)
				if k is not None:
					start = k.start(1)
					end = k.end(1)
					if start != end:
						old_citation_key = bib[start:end]
					#
					else:
						old_citation = start
					#
				#
			#
		#
		if any(v is None for v in (author, year, old_citation_key)):
			print("Could not parse bib of {}.".format(doi))
			print("DOI: {}".format(doi), file=sys.stderr)
			continue
		#
		target_dir = os.path.join(path, "references", year)
		if not os.path.exists(target_dir):
			os.makedirs(target_dir)
		#
		elif not os.path.isdir(target_dir):
			print("Could not copy file to target.")
			print("TARGET: " + target_dir, file=stderr)
			continue
		#
		for letter in letters:
			citation_key = author + year + letter
			if not os.path.exists(os.path.join(target_dir, citation_key)):
				break
			#
		#
		target_filename = os.path.join(target_dir, citation_key + os.path.splitext(filepath)[1])
		# Modify bib to include citation key
		if isinstance(old_citation_key, str):
			bib = bib.replace(old_citation_key, citation_key)
		#
		else:
			bib = bib[:old_citation_key] + citation_key + bib[old_citation_key:]
		#
		shutil.move(filepath, target_filename)
		repository[doi] = (target_filename, bib)
		print("Added {}.".format(doi))
	#
	write_compressed_json(bibs_file, repository)
#

